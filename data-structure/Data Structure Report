Data Structure Report
ID:10
Used Data Structures:
1-	Previously Implemented Stack[DFS]
2-	Previously Implemented Queue[BFS]
3-	Previously Implemented Queue[Collecting path]
4-	2D arrays
5-	A Graph Node [self-implemented]

Algorithm:
1-	File is read via a Scanner 
2-	2 scans , one for length and one for reading
3-	The maze is stored in a 2D array and checked for multiple ‘S’ , and no ‘E’ as it is being stored.
4-	At the Beginning of DFS or BFS the array is scanned for the entry point.

5-	In BFS , we use a queue to traverse in all directions level by level , noticed that multiple cells were recorded several times ,
So added a small v for enqueuing and a V for visiting, every enqueue records a parent child pair in a parallel grid so that whenever we want to
retrieve the parent we can use the same index to see it`s corresponding pair in this grid and fetch the parent.

6-	In DFS it`s exactly the same algorithm with a stack instead of a queue to traverse in one direction till it ends, and also the grid is used .
7-	Once reaching the target we start returning to the parents until we reach the origin ‘s’.
8-	 The path is stored via a queue while we traverse back and then later converted to a 2D array

Assumptions & details:
1-	I assumed that the Exit will never be on top of the entrance , I assumed that we can distribute the work into multiple methods for 
convention`s sake ,  and that the grid approach is actually influenced from the sparse arrays storage methods.

 
Sample Runs:

5 5
##..S
..#..
.##..
E....
..###

BFS: [[0, 4], [1, 4], [2, 4], [3, 4], [3, 3], [3, 2], [3, 1], [3, 0]]
DFS: [[0, 4], [1, 4], [2, 4], [3, 4], [3, 3], [3, 2], [3, 1], [4, 1], [4, 0], [3, 0]]

6 6
##..S.
E.#..#
.##...
....#.
..###.
......

BFS: [[0, 4], [1, 4], [2, 4], [2, 3], [3, 3], [3, 2], [3, 1], [3, 0], [2, 0],[1, 0]]
DFS: [[0, 4], [1, 4], [2, 4], [2, 5], [3, 5], [4, 5], [5, 5], [5, 4], [5, 3], [5, 2], [5, 1], [4, 1], [3, 1], [3, 0], [2, 0], [1, 0]]

Comparison:
1-	BFS Scans and advances in all directions until it hits the exit
Working level by level ,its branching is usually high and covers a large area in each level pass.
2-	DFS Scans in all directions but moves in one direction only so whichever direction comes first in its way it follows until a dead end ,
where it returns to a previous fork and takes the second choice and so on until it reaches the target and it generally has less branching than BFS except in some worst case scenarios,
on the other hand it might take a longer path than its counterpart.
    

